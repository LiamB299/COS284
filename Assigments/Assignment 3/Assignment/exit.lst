     1                                 %line 1+1 main.asm
     2                                 [segment .data]
     3 00000000 496E7075743A            input_text_1 db "Input:"
     4 00000006 0A                      ten db 10
     5                                 
     6                                 [segment .bss]
     7 00000000 <gap>                   Input resb 16
     8 00000010 <gap>                   check resb 1
     9                                 
    10                                 [segment .text]
    11                                 [global _start]
    12                                 
    13                                 _start:
    14                                 
    15 00000000 4D31E4                  xor r12, r12
    16 00000003 4D31F6                  xor r14, r14
    17 00000006 4D31FF                  xor r15, r15
    18                                 
    19                                 
    20 00000009 48C7C000000000          mov rax, 0
    21 00000010 48C7C700000000          mov rdi, 0
    22 00000017 48C7C6[00000000]        mov rsi, Input
    23 0000001E 48C7C210000000          mov rdx, 16
    24 00000025 0F05                    syscall
    25                                 
    26 00000027 49C7C30A000000          mov r11, 10
    27                                 
    28 0000002E 418A8424[00000000]      mov al, byte[Input+r12]
    29 00000036 49FFC4                  inc r12
    30 00000039 880425[00000000]        mov byte[check], al
    31                                 
    32                                 
    33                                 check_neg:
    34 00000040 48C7C201000000          mov rdx, 1
    35 00000047 8A0425[00000000]        mov al, [check]
    36 0000004E 3C2D                    cmp al, 45
    37 00000050 4C0F44F2                cmovz r14, rdx
    38                                 
    39                                 
    40 00000054 4488F0                  mov al, r14b
    41 00000057 4883F800                cmp rax, 0
    42 0000005B 7410                    je continue_1
    43                                 
    44                                 next_dig_1:
    45 0000005D 418A8424[00000000]      mov al, byte[Input+r12]
    46 00000065 49FFC4                  inc r12
    47 00000068 880425[00000000]        mov byte[check], al
    48                                 
    49                                 continue_1:
    50                                 
    51 0000006F 803C25[00000000]20      cmp byte[check], 32
    52 00000077 741E                    je num2
    53                                 
    54                                 store_bit_1:
    55 00000079 4C89C8                  mov rax, r9
    56 0000007C 49F7E3                  mul r11
    57 0000007F 4989C1                  mov r9, rax
    58 00000082 802C25[00000000]30      sub byte[check], 48
    59 0000008A 4831C0                  xor rax, rax
    60 0000008D 8A0425[00000000]        mov al, byte[check]
    61 00000094 4901C1                  add r9, rax
    62 00000097 EBC2                    jmp next_dig_1
    63                                 
    64                                 
    65                                 num2:
    66 00000099 418A8424[00000000]      mov al, byte[Input+r12]
    67 000000A1 49FFC4                  inc r12
    68 000000A4 880425[00000000]        mov byte[check], al
    69                                 
    70                                 check_neg_2:
    71 000000AB 48C7C201000000          mov rdx, 1
    72 000000B2 8A0425[00000000]        mov al, [check]
    73 000000B9 3C2D                    cmp al, 45
    74 000000BB 4C0F44FA                cmovz r15, rdx
    75                                 
    76                                 
    77 000000BF 4180FF00                cmp r15b, 0
    78 000000C3 7410                    je continue_2
    79                                 
    80                                 next_dig_2:
    81 000000C5 418A8424[00000000]      mov al, byte[Input+r12]
    82 000000CD 49FFC4                  inc r12
    83 000000D0 880425[00000000]        mov byte[check], al
    84                                 
    85                                 continue_2:
    86                                 
    87 000000D7 803C25[00000000]0A      cmp byte[check], 10
    88 000000DF 743C                    je neg1
    89                                 
    90                                 
    91 000000E1 803C25[00000000]00      cmp byte[check], 0
    92 000000E9 7432                    je neg1
    93                                 
    94                                 
    95 000000EB 803C25[00000000]2F      cmp byte[check], 47
    96 000000F3 7E28                    jle neg1
    97                                 
    98                                 
    99 000000F5 803C25[00000000]3A      cmp byte[check], 58
   100 000000FD 7D1E                    jge neg1
   101                                 
   102                                 
   103                                 store_bit_2:
   104 000000FF 4C89D0                  mov rax, r10
   105 00000102 49F7E3                  mul r11
   106 00000105 4989C2                  mov r10, rax
   107 00000108 802C25[00000000]30      sub byte[check], 48
   108 00000110 4831C0                  xor rax, rax
   109 00000113 8A0425[00000000]        mov al, byte[check]
   110 0000011A 4901C2                  add r10, rax
   111 0000011D EBA4                    jmp next_dig_2
   112                                 
   113                                 
   114                                 neg1:
   115 0000011F 4488F0                  mov al, r14b
   116 00000122 3C01                    cmp al, 1
   117 00000124 7501                    jnz neg2
   118 00000126 49F7D9                  neg r9
   119                                 
   120                                 neg2:
   121 00000129 4488F8                  mov al, r15b
   122 0000012C 3C01                    cmp al, 1
   123 0000012E 7501                    jnz end_neg
   124 00000130 49F7DA                  neg r10
   125                                 
   126                                 
   127                                 
   128                                 
   129                                 
   130                                 
   131                                 end_neg
   132                                 
   133                                 
   134                                 
   135                                 
   136                                 
   137                                 
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 
   143                                 
   144 00000133 4D31C0                 xor r8, r8
   145 00000136 4D31DB                 xor r11, r11
   146 00000139 4D31E4                 xor r12, r12
   147 0000013C 4D31ED                 xor r13, r13
   148 0000013F 4D31F6                 xor r14, r14
   149 00000142 4D31FF                 xor r15, r15
   150 00000145 4831C0                 xor rax, rax
   151                                 
   152                                 algor:
   153 00000148 4D89D4                  mov r12, r10
   154 0000014B 48C7C001000000          mov rax, 1
   155 00000152 4921C4                  and r12, rax
   156                                 
   157                                 
   158                                 if:
   159 00000155 4983FC01                cmp r12, 1
   160 00000159 750F                    jnz elif
   161 0000015B 4983FB00                cmp r11, 0
   162 0000015F 7509                    jnz elif
   163                                 
   164                                 
   165 00000161 4D89CD                  mov r13, r9
   166 00000164 49F7DD                  neg r13
   167                                 
   168 00000167 4D31F6                  xor r14, r14
   169 0000016A EB17                    jmp reverse
   170                                 
   171                                 elif:
   172 0000016C 4983FC00                cmp r12, 0
   173 00000170 0F85B3000000            jnz operations
   174 00000176 4983FB01                cmp r11, 1
   175 0000017A 0F85A9000000            jnz operations
   176                                 
   177                                 
   178 00000180 4D89CD                  mov r13, r9
   179 00000183 EBFE                    jmp reverse
   180                                 
   181                                 
   182                                 reverse:
   183                                 
   184 00000185 4183FD00                cmp r13d, 0
   185 00000189 0F849A000000            jz operations
   186                                 
   187 0000018F 4D31F6                  xor r14, r14
   188 00000192 4489E8                  mov eax, r13d
   189 00000195 4189C5                  mov r13d, eax
   190 00000198 4D31FF                  xor r15, r15
   191                                 
   192                                 while:
   193 0000019B 49FFC7                  inc r15
   194 0000019E 49D1E6                  shl r14, 1
   195                                 
   196 000001A1 4C89E8                  mov rax, r13
   197 000001A4 4883E001                and rax, 1
   198 000001A8 4883F801                cmp rax, 1
   199 000001AC 7502                    jnz after
   200 000001AE 4983F601                xor r14, 1
   201                                 
   202                                 after:
   203 000001B2 49D1ED                  shr r13, 1
   204                                 
   205 000001B5 4983FD00                cmp r13, 0
   206 000001B9 75DE                    jnz while
   207 000001BB 4983FF20                cmp r15, 32
   208 000001BF 75D8                    jnz while
   209                                 
   210 000001C1 4D31FF                  xor r15, r15
   211                                 
   212                                 first_space:
   213 000001C4 4983F800                cmp r8, 0
   214 000001C8 7424                    jz print
   215                                 
   216                                 
   217 000001CA C60425[00000000]20      mov byte[Input], 32
   218 000001D2 48C7C001000000          mov rax, 1
   219 000001D9 48C7C701000000          mov rdi, 1
   220 000001E0 48C7C6[00000000]        mov rsi, Input
   221 000001E7 48C7C201000000          mov rdx, 1
   222 000001EE 0F05                    syscall
   223                                 
   224                                 
   225                                 print:
   226 000001F0 49FFC0                  inc r8
   227 000001F3 49FFC7                  inc r15
   228 000001F6 49D1EE                  shr r14, 1
   229 000001F9 0F92D0                  setc al
   230                                 
   231                                 
   232 000001FC 880425[00000000]        mov byte[Input], al
   233 00000203 800425[00000000]30      add byte[Input], 48
   234 0000020B 48C7C001000000          mov rax, 1
   235 00000212 48C7C701000000          mov rdi, 1
   236 00000219 48C7C6[00000000]        mov rsi, Input
   237 00000220 48C7C201000000          mov rdx, 1
   238 00000227 0F05                    syscall
   239                                 
   240 00000229 4983FF20                cmp r15, 32
   241 0000022D 75BF                    jnz print
   242                                 
   243                                 
   244                                 
   245                                 operations:
   246 0000022F 49D1E1                  shl r9, 1
   247 00000232 4D89E3                  mov r11, r12
   248                                 
   249 00000235 4D89D6                  mov r14, r10
   250 00000238 49D1FE                  sar r14, 1
   251 0000023B 4D39F2                  cmp r10, r14
   252 0000023E 7406                    jz exit
   253                                 
   254 00000240 49D1FA                  sar r10, 1
   255 00000243 E9FBFEFFFF              jmp algor
   256                                 
   257                                 
   258                                 
   259                                 exit:
   260 00000248 48C7C03C000000          mov rax, 60
   261 0000024F 48C7C700000000          mov rdi, 0
   262 00000256 0F05                    syscall
